#!/bin/sh
set -eoux
export POSIXLY_CORRECT=1

if [ ! -f './project.clj' ]
then
    echo "This script must be run from the root of the project."
fi

root_path=${PWD}
test_home=test/resources/data/test-packrat
test_data=test/resources/data/packrat

name=$(lein print :name | sed 's|"||g')
version=$(lein print :version | sed 's|"||g')

ni=${root_path}/${name}-${version}-standalone
jar=${root_path}/target/uberjar/${name}-${version}-standalone.jar
runthis=
if [ -e "${ni}" ]
then
    runthis="${ni}"
else
    runthis="java -jar ${jar}"
fi


rm -rf "${test_home}"
mkdir -p "${test_home}"

${runthis} \
    resolve-locations \
        -R ${test_data}/index.dsrepo -r b -p 'e==1.8.0'

${runthis} \
    resolve-locations \
        -R ${test_data}/index.dsrepo -r b -o json | \
        jq  -c '."install-graph"' | tee ${test_home}/actual.json

if [ "$(cat "${test_home}/actual.json")" != \
     "$(cat "${test_data}/expected.json")" ]
then
    echo "output mismatch" >&2
    exit 1
fi

${runthis} \
    resolve-locations \
        -R ${test_data}/index.dsrepo -r b -p 'e==1.8.0' -o json | \
        jq  -c '."install-graph"' | tee ${test_home}/actual2.json

if [ "$(cat "${test_home}/actual2.json")" != \
     "$(cat "${test_data}/expected2.json")" ]
then
    echo "output mismatch" >&2
    exit 1
fi
