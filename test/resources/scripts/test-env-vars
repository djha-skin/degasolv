#!/bin/sh
set -eoux

export POSIXLY_CORRECT=1

if [ ! -f './project.clj' -a ! -f './build.boot' ]
then
    echo "This script must be run from the root of the project."
fi

root_path=${PWD}
test_home=test/resources/data/test-env-vars

name=$(lein print :name | sed 's|"||g')
version=$(lein print :version | sed 's|"||g')

rm -rf "${test_home}"
mkdir -p "${test_home}"
cd "${test_home}"

# First, generate the needed cards for resolution.
ni=${root_path}/${name}-${version}-standalone
jar=${root_path}/target/uberjar/${name}-${version}-standalone.jar
runthis=
if [ -e "${ni}" ]
then
    runthis="${ni} -Xss16m"
else
    runthis="java -Xss16m -jar ${jar}"
fi

DEGASOLV_ID="a" \
    DEGASOLV_REQUIREMENTS="b" \
    DEGASOLV_VERSION="1.0.0" \
    DEGASOLV_LOCATION="https://example.com/repo/a-1.0.0.zip" \
    DEGASOLV_CARD_FILE=$PWD/a-1.0.0.zip.dscard \
    ${runthis} \
         generate-card

cat > ./config.json << JSON_CONFIG
{
    "requirements": [],
    "id": "b",
    "location": "https://example.com/repo/b-2.3.0.zip"
}
JSON_CONFIG
cat > ./config.edn << EDN_CONFIG
{
    :version "2.3.0"
    :requirements ["c"]
}
EDN_CONFIG
    DEGASOLV_CONFIG_FILES="./config.edn" \
    DEGASOLV_JSON_CONFIG_FILES="./config.json" \
    DEGASOLV_CARD_FILE=$PWD/b-2.3.0.zip.dscard \
    ${runthis} \
    generate-card

${runthis} generate-repo-index -d $PWD -I $PWD/index.dsrepo

${runthis} \
    resolve-locations \
    -R ${PWD}/index.dsrepo \
    --requirement "a<=1.0.0"
